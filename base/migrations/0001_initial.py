# Copyright 2021 Rafa≈Ç Safin (rafsaf). All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

# Generated by Django 3.0.7 on 2020-12-05 00:33

import datetime

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Documentation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=30)),
                ("main_page", models.TextField(default="")),
                ("language", models.CharField(default="pl", max_length=2)),
            ],
            options={
                "ordering": ("-language", "title"),
            },
        ),
        migrations.CreateModel(
            name="Outline",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(default=django.utils.timezone.now)),
                ("name", models.TextField()),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("active", "Active"), ("inactive", "Inactive")],
                        default="active",
                        max_length=8,
                    ),
                ),
                (
                    "written",
                    models.CharField(
                        choices=[("active", "Active"), ("inactive", "Inactive")],
                        default="inactive",
                        max_length=8,
                    ),
                ),
                (
                    "editable",
                    models.CharField(
                        choices=[("active", "Active"), ("inactive", "Inactive")],
                        default="active",
                        max_length=8,
                    ),
                ),
                (
                    "ally_tribe_tag",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=6),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "enemy_tribe_tag",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=6),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "initial_outline_targets",
                    models.TextField(blank=True, default="---"),
                ),
                (
                    "initial_outline_min_off",
                    models.IntegerField(
                        default=19000,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(28000),
                        ],
                    ),
                ),
                (
                    "initial_outline_front_dist",
                    models.IntegerField(
                        default=12,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "initial_outline_target_dist",
                    models.IntegerField(
                        default=50,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(150),
                        ],
                    ),
                ),
                (
                    "initial_outline_fake_limit",
                    models.IntegerField(
                        default=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
                ("off_troops", models.TextField(blank=True, default="")),
                ("deff_troops", models.TextField(blank=True, default="")),
                (
                    "avaiable_offs",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), default=list, size=None
                    ),
                ),
                (
                    "avaiable_nobles",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), default=list, size=None
                    ),
                ),
                (
                    "avaiable_offs_near",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), default=list, size=None
                    ),
                ),
                (
                    "avaiable_nobles_near",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), default=list, size=None
                    ),
                ),
                (
                    "mode_off",
                    models.CharField(
                        choices=[
                            ("closest", "Closest Front"),
                            ("close", "Close Back"),
                            ("random", "Random Back"),
                            ("far", "Far Back"),
                        ],
                        default="random",
                        max_length=15,
                    ),
                ),
                (
                    "mode_noble",
                    models.CharField(
                        choices=[
                            ("closest", "Closest Front"),
                            ("close", "Close Back"),
                            ("random", "Random Back"),
                            ("far", "Far Back"),
                        ],
                        default="closest",
                        max_length=15,
                    ),
                ),
                (
                    "mode_division",
                    models.CharField(
                        choices=[
                            ("divide", "Divide off with nobles"),
                            ("not_divide", "Dont't divide off"),
                            ("separatly", "Off and nobles separatly"),
                        ],
                        default="not_divide",
                        max_length=15,
                    ),
                ),
                (
                    "mode_guide",
                    models.CharField(
                        choices=[
                            ("one", "Try send all nobles to one target"),
                            ("many", "Nobles to one or many targets"),
                            ("single", "Try single nobles from many villages"),
                        ],
                        default="one",
                        max_length=15,
                    ),
                ),
                (
                    "mode_split",
                    models.CharField(
                        choices=[
                            ("together", "Nobles from one village as one command"),
                            ("split", "Nobles from one village as many commands"),
                        ],
                        default="split",
                        max_length=15,
                    ),
                ),
                (
                    "filter_weights_min",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(30000),
                        ],
                    ),
                ),
                (
                    "filter_weights_max",
                    models.IntegerField(
                        default=30000,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(30000),
                        ],
                    ),
                ),
                (
                    "filter_card_number",
                    models.IntegerField(
                        default=12,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(40),
                        ],
                    ),
                ),
                (
                    "filter_hide_front",
                    models.CharField(
                        choices=[
                            ("all", "All"),
                            ("front", "Front"),
                            ("back", "Back"),
                            ("hidden", "Hidden"),
                        ],
                        default="all",
                        max_length=20,
                    ),
                ),
                ("default_show_hidden", models.BooleanField(default=False)),
                (
                    "title_message",
                    models.CharField(default="Outline Targets", max_length=50),
                ),
                (
                    "text_message",
                    models.CharField(blank=True, default="", max_length=500),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
            },
        ),
        migrations.CreateModel(
            name="OutlineOverview",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "outline",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="base.Outline",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OutlineTime",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.IntegerField(default=0)),
                (
                    "outline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Outline"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("player_id", models.IntegerField()),
                ("name", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Server",
            fields=[
                (
                    "dns",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("prefix", models.CharField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name="TargetVertex",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("target", models.CharField(max_length=7)),
                ("player", models.CharField(max_length=30)),
                ("fake", models.BooleanField(default=False)),
                ("required_off", models.IntegerField(default=0)),
                ("required_noble", models.IntegerField(default=0)),
                (
                    "exact_off",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), default=list, size=4
                    ),
                ),
                (
                    "exact_noble",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), default=list, size=4
                    ),
                ),
                (
                    "mode_off",
                    models.CharField(
                        choices=[
                            ("closest", "Closest Front"),
                            ("close", "Close Back"),
                            ("random", "Random Back"),
                            ("far", "Far Back"),
                        ],
                        default="random",
                        max_length=15,
                    ),
                ),
                (
                    "mode_noble",
                    models.CharField(
                        choices=[
                            ("closest", "Closest Front"),
                            ("close", "Close Back"),
                            ("random", "Random Back"),
                            ("far", "Far Back"),
                        ],
                        default="closest",
                        max_length=15,
                    ),
                ),
                (
                    "mode_division",
                    models.CharField(
                        choices=[
                            ("divide", "Divide off with nobles"),
                            ("not_divide", "Dont't divide off"),
                            ("separatly", "Off and nobles separatly"),
                        ],
                        default="not_divide",
                        max_length=15,
                    ),
                ),
                (
                    "mode_guide",
                    models.CharField(
                        choices=[
                            ("one", "Try send all nobles to one target"),
                            ("many", "Nobles to one or many targets"),
                            ("single", "Try single nobles from many villages"),
                        ],
                        default="one",
                        max_length=15,
                    ),
                ),
                (
                    "outline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Outline"
                    ),
                ),
                (
                    "outline_time",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="base.OutlineTime",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TargetVertexOverview",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("target", models.CharField(max_length=7)),
                ("player", models.CharField(max_length=30)),
                ("fake", models.BooleanField(default=False)),
                (
                    "outline_overview",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.OutlineOverview",
                    ),
                ),
                (
                    "target_vertex",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="base.TargetVertex",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WeightMaximum",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.CharField(max_length=7)),
                ("x_coord", models.IntegerField(default=0)),
                ("y_coord", models.IntegerField(default=0)),
                ("player", models.CharField(max_length=30)),
                ("off_max", models.IntegerField()),
                ("off_state", models.IntegerField(default=0)),
                ("off_left", models.IntegerField()),
                (
                    "off_in_village",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
                ("nobleman_max", models.IntegerField()),
                ("nobleman_state", models.IntegerField(default=0)),
                ("nobleman_left", models.IntegerField()),
                (
                    "nobleman_in_village",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
                ("hidden", models.BooleanField(default=False)),
                ("first_line", models.BooleanField(default=False)),
                (
                    "fake_limit",
                    models.IntegerField(
                        default=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
                (
                    "outline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Outline"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Result",
            fields=[
                (
                    "outline",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="base.Outline",
                    ),
                ),
                ("results_get_deff", models.TextField(default="")),
                ("results_outline", models.TextField(default="")),
                ("results_players", models.TextField(default="")),
                ("results_sum_up", models.TextField(default="")),
            ],
        ),
        migrations.CreateModel(
            name="World",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("postfix", models.CharField(max_length=10)),
                ("last_update", models.DateTimeField(auto_now_add=True)),
                ("connection_errors", models.IntegerField(default=0)),
                ("speed_world", models.FloatField(blank=True, default=1, null=True)),
                ("speed_units", models.FloatField(blank=True, default=1, null=True)),
                (
                    "paladin",
                    models.CharField(
                        choices=[("active", "Active"), ("inactive", "Inactive")],
                        default="active",
                        max_length=8,
                    ),
                ),
                (
                    "archer",
                    models.CharField(
                        choices=[("active", "Active"), ("inactive", "Inactive")],
                        default="active",
                        max_length=8,
                    ),
                ),
                (
                    "militia",
                    models.CharField(
                        choices=[("active", "Active"), ("inactive", "Inactive")],
                        default="active",
                        max_length=8,
                    ),
                ),
                ("max_noble_distance", models.IntegerField(default=50)),
                (
                    "server",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Server"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WeightModelOverview",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.CharField(max_length=7)),
                ("off", models.IntegerField()),
                ("distance", models.FloatField()),
                ("nobleman", models.IntegerField()),
                ("order", models.IntegerField()),
                ("player", models.CharField(max_length=40)),
                ("t1", models.TimeField(default=datetime.time(0, 0))),
                ("t2", models.TimeField(default=datetime.time(0, 0))),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.TargetVertexOverview",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WeightModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.CharField(max_length=7)),
                ("off", models.IntegerField()),
                ("distance", models.FloatField()),
                ("nobleman", models.IntegerField()),
                ("order", models.IntegerField()),
                ("player", models.CharField(max_length=40)),
                ("first_line", models.BooleanField(default=False)),
                ("t1", models.TimeField(default=datetime.time(0, 0))),
                ("t2", models.TimeField(default=datetime.time(0, 0))),
                (
                    "state",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.WeightMaximum",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.TargetVertex",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VillageModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("village_id", models.IntegerField()),
                ("x_coord", models.IntegerField()),
                ("y_coord", models.IntegerField()),
                ("coord", models.CharField(max_length=7)),
                (
                    "player",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.Player",
                    ),
                ),
                (
                    "world",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.World"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Tribe",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tribe_id", models.IntegerField()),
                ("tag", models.TextField()),
                (
                    "world",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.World"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "server",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="base.Server",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="player",
            name="tribe",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="base.Tribe",
            ),
        ),
        migrations.AddField(
            model_name="player",
            name="world",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="base.World"
            ),
        ),
        migrations.CreateModel(
            name="PeriodModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("all", "All"),
                            ("random", "Random"),
                            ("exact", "Exact"),
                        ],
                        max_length=15,
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        choices=[("noble", "Noble"), ("ram", "Ram")], max_length=15
                    ),
                ),
                (
                    "from_number",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
                ("to_number", models.IntegerField(blank=True, default=None, null=True)),
                ("from_time", models.TimeField(default=datetime.time(7, 0))),
                ("to_time", models.TimeField(default=datetime.time(7, 0))),
                (
                    "outline_time",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.OutlineTime",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Overview",
            fields=[
                (
                    "token",
                    models.CharField(
                        db_index=True, max_length=100, primary_key=True, serialize=False
                    ),
                ),
                ("player", models.CharField(max_length=40)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("table", models.TextField()),
                ("string", models.TextField()),
                ("targets", models.TextField(default="")),
                ("show_hidden", models.BooleanField(default=False)),
                ("removed", models.BooleanField(default=False)),
                (
                    "outline",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="base.Outline",
                    ),
                ),
                (
                    "outline_overview",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.OutlineOverview",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="outline",
            name="world",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="base.World"
            ),
        ),
    ]
